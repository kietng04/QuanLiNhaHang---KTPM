package GUI.Comp.Panel;

import BUS.IngredientsBUS;
import DTO.IngredientsDTO;
import GUI.Comp.Dialog.DialogIngredient;
import com.formdev.flatlaf.FlatClientProperties;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
/**
 *
 * @author Tai
 */
public class QuanLiNguyenLieu extends javax.swing.JPanel {

    private boolean isSelectAll = false;
    IngredientsBUS ingredientsBUS = new IngredientsBUS();
    DefaultTableModel model = new DefaultTableModel();
    ArrayList<IngredientsDTO> ingredientsList = new ArrayList<>();
    public QuanLiNguyenLieu()  {
        initComponents();
        
        tbIngredients.setRowHeight(35);
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) tbIngredients.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(JLabel.LEFT);
        txtSearch.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Nhập tên nguyên liệu");
        loadDataToTable(isSelectAll);
        
        

    }

    private void loadDataToTable(boolean isSelectAll) {
        // Tạo một đối tượng IngredientsBUS
        IngredientsBUS ingredientsBUS = new IngredientsBUS();

        // Gọi phương thức để lấy danh sách nguyên liệu từ cơ sở dữ liệu
        ingredientsList = ingredientsBUS.getAllActiveIngredients();

        // Tạo DefaultTableModel để đặt dữ liệu vào jTable
        model = (DefaultTableModel) tbIngredients.getModel();

        // Xóa toàn bộ dữ liệu cũ trong jTable
        model.setRowCount(0);

        // Duyệt qua danh sách nguyên liệu và thêm từng dòng vào jTable
        for (IngredientsDTO ingredient : ingredientsList) {
            Object[] row = {isSelectAll, ingredient.getId(), ingredient.getName(), ingredient.getDes(), ingredient.getUnit(),ingredient.getQuantity()};
            model.addRow(row);
        }
        model.fireTableDataChanged();
        tbIngredients.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        panelBackground1 = new GUI.Comp.Swing.PanelBackground();
        panelBackground2 = new GUI.Comp.Swing.PanelBackground();
        panelBackground4 = new GUI.Comp.Swing.PanelBackground();
        panelBackground5 = new GUI.Comp.Swing.PanelBackground();
        panelBackground6 = new GUI.Comp.Swing.PanelBackground();
        panelBackground8 = new GUI.Comp.Swing.PanelBackground();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbIngredients = new javax.swing.JTable();
        panelBackground7 = new GUI.Comp.Swing.PanelBackground();
        pnSelectAll = new GUI.Comp.Swing.PanelBackground();
        chbSelectAll = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnChange = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        btnDelete = new javax.swing.JButton();

        jPanel3.setMaximumSize(new java.awt.Dimension(50, 23));
        jPanel3.setPreferredSize(new java.awt.Dimension(50, 23));

        setBackground(new java.awt.Color(30, 30, 30));
        setLayout(new java.awt.BorderLayout());

        panelBackground1.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground1.setLayout(new java.awt.BorderLayout());

        panelBackground2.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground2.setPreferredSize(new java.awt.Dimension(20, 10));
        panelBackground1.add(panelBackground2, java.awt.BorderLayout.LINE_START);

        panelBackground4.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground4.setToolTipText("");
        panelBackground4.setMinimumSize(new java.awt.Dimension(20, 10));
        panelBackground4.setPreferredSize(new java.awt.Dimension(20, 10));
        panelBackground1.add(panelBackground4, java.awt.BorderLayout.LINE_END);

        panelBackground5.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground5.setPreferredSize(new java.awt.Dimension(10, 20));
        panelBackground1.add(panelBackground5, java.awt.BorderLayout.PAGE_END);

        panelBackground6.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground6.setLayout(new java.awt.BorderLayout(0, 25));

        panelBackground8.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground8.setLayout(new java.awt.BorderLayout());

        tbIngredients.setAutoCreateRowSorter(true);
        tbIngredients.setBackground(new java.awt.Color(35, 35, 35));
        tbIngredients.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        tbIngredients.setForeground(new java.awt.Color(255, 255, 255));
        tbIngredients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "123", "123", "123", null, "123"},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "", "Mã Nguyên Liệu", "Tên Nguyên Liệu", "Mô Tả", "Đơn Vị", "Số Lượng"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbIngredients);
        if (tbIngredients.getColumnModel().getColumnCount() > 0) {
            tbIngredients.getColumnModel().getColumn(0).setMinWidth(25);
            tbIngredients.getColumnModel().getColumn(0).setPreferredWidth(25);
            tbIngredients.getColumnModel().getColumn(0).setMaxWidth(25);
        }

        panelBackground8.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panelBackground7.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground7.setMinimumSize(new java.awt.Dimension(1000, 23));
        panelBackground7.setPreferredSize(new java.awt.Dimension(1000, 75));
        panelBackground7.setLayout(new javax.swing.BoxLayout(panelBackground7, javax.swing.BoxLayout.LINE_AXIS));

        pnSelectAll.setBackground(new java.awt.Color(35, 35, 35));
        pnSelectAll.setMaximumSize(new java.awt.Dimension(100, 30));

        chbSelectAll.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        chbSelectAll.setForeground(new java.awt.Color(255, 255, 255));
        chbSelectAll.setText("Select All");
        chbSelectAll.setPreferredSize(new java.awt.Dimension(85, 21));
        chbSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbSelectAllActionPerformed(evt);
            }
        });
        pnSelectAll.add(chbSelectAll);

        panelBackground7.add(pnSelectAll);

        jPanel1.setBackground(new java.awt.Color(30, 30, 30));
        jPanel1.setMaximumSize(new java.awt.Dimension(20, 20));
        jPanel1.setPreferredSize(new java.awt.Dimension(20, 20));
        panelBackground7.add(jPanel1);

        txtSearch.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtSearch.setMaximumSize(new java.awt.Dimension(175, 30));
        txtSearch.setPreferredSize(new java.awt.Dimension(150, 50));
        txtSearch.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtSearchCaretUpdate(evt);
            }
        });
        panelBackground7.add(txtSearch);

        jPanel4.setBackground(new java.awt.Color(30, 30, 30));
        jPanel4.setMaximumSize(new java.awt.Dimension(50, 23));
        jPanel4.setPreferredSize(new java.awt.Dimension(50, 23));
        panelBackground7.add(jPanel4);

        btnAdd.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.setMaximumSize(new java.awt.Dimension(72, 40));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        panelBackground7.add(btnAdd);

        jPanel5.setBackground(new java.awt.Color(30, 30, 30));
        jPanel5.setMaximumSize(new java.awt.Dimension(50, 23));
        jPanel5.setPreferredSize(new java.awt.Dimension(50, 23));
        panelBackground7.add(jPanel5);

        btnChange.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnChange.setText("Sửa");
        btnChange.setMaximumSize(new java.awt.Dimension(72, 40));
        btnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActionPerformed(evt);
            }
        });
        panelBackground7.add(btnChange);

        jPanel6.setBackground(new java.awt.Color(30, 30, 30));
        jPanel6.setMaximumSize(new java.awt.Dimension(50, 23));
        jPanel6.setPreferredSize(new java.awt.Dimension(50, 23));
        panelBackground7.add(jPanel6);

        btnDelete.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.setMaximumSize(new java.awt.Dimension(72, 40));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        panelBackground7.add(btnDelete);

        panelBackground8.add(panelBackground7, java.awt.BorderLayout.PAGE_START);

        panelBackground6.add(panelBackground8, java.awt.BorderLayout.CENTER);

        panelBackground1.add(panelBackground6, java.awt.BorderLayout.CENTER);

        add(panelBackground1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // Tạo một JDialog mới
        JDialog dialog = new JDialog();
        // Thiết lập JPanel DialogIngredient làm nội dung của JDialog
        DialogIngredient dialogPanel = new DialogIngredient();
        dialog.getContentPane().add(dialogPanel);
        dialogPanel.load(true);
        // Thiết lập thuộc tính cho JDialog
        
        dialog.setSize(600, 500); // Thiết lập kích thước
        dialog.setModal(true); // Thiết lập JDialog là modal để chặn tương tác với các thành phần khác trong cửa sổ cha
        dialog.setLocationRelativeTo(this); // Hiển thị JDialog ở giữa cửa sổ cha
        dialog.setVisible(true); // Hiển thị JDialog
        // Sau khi JDialog đóng lại, có thể thực hiện các hành động cần thiết tại đây
        loadDataToTable(isSelectAll);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbIngredients.getModel();
        int rowCount = model.getRowCount();
        boolean isSelected = false; // Biến này để kiểm tra xem có ít nhất một dòng được chọn hay không

        for (int i = rowCount - 1; i >= 0; i--) {
            Boolean checked = (Boolean) tbIngredients.getValueAt(i, 0); // Lấy giá trị của checkbox từ cột đầu tiên
            if (checked) {
                isSelected = true;
                long id = (long) tbIngredients.getValueAt(i, 1); // Lấy giá trị ID từ cột thứ hai
                String currentName = (String) tbIngredients.getValueAt(i, 2);
                String currentDes = (String) tbIngredients.getValueAt(i, 3);
                String currentUnit = (String) tbIngredients.getValueAt(i, 4);
                int currentQuantity = (int) tbIngredients.getValueAt(i, 5);

            
                IngredientsDTO ingredient = new IngredientsDTO();
                ingredient.setId(id);
                ingredient.setName(currentName);
                ingredient.setDes(currentDes);
                ingredient.setQuantity(currentQuantity);
                ingredient.setUnit(currentUnit);

                JDialog dialog = new JDialog();
                DialogIngredient dialogPanel = new DialogIngredient();
                dialog.getContentPane().add(dialogPanel);
                dialogPanel.load(false);
                dialogPanel.changeData(ingredient);
                
                
                
                dialog.setSize(600, 500); // Thiết lập kích thước
                dialog.setModal(true); // Thiết lập JDialog là modal để chặn tương tác với các thành phần khác trong cửa sổ cha
                dialog.setLocationRelativeTo(this); // Hiển thị JDialog ở giữa cửa sổ cha
                dialog.setVisible(true); // Hiển thị JDialog
                
           
                loadDataToTable(isSelectAll);
            }
        }

        // Kiểm tra xem có ít nhất một dòng được chọn không
        if (!isSelected) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất một dòng để sửa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return; // Dừng phương thức nếu không có dòng nào được chọn
        }

        
    }//GEN-LAST:event_btnChangeActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbIngredients.getModel();
        int rowCount = model.getRowCount();
        boolean isSelected = false; // Biến này để kiểm tra xem có ít nhất một dòng được chọn hay không
        boolean showMessage = true; // Biến này để kiểm tra xem thông báo đã được hiển thị chưa

        for (int i = rowCount - 1; i >= 0; i--) {
            Boolean checked = (Boolean) tbIngredients.getValueAt(i, 0); // Lấy giá trị của checkbox từ cột đầu tiên
            if (checked) {
                isSelected = true;
                long id = (long) tbIngredients.getValueAt(i, 1); // Lấy giá trị ID từ cột thứ hai

                // Hỏi lại người dùng có chắc chắn muốn xóa không, chỉ hiển thị một lần
                if (showMessage) {
                    int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa dòng đã chọn?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
                    if (option != JOptionPane.YES_OPTION) {
                        // Người dùng không đồng ý xóa, dừng vòng lặp
                        return;
                    }
                    showMessage = false; // Đánh dấu rằng thông báo đã được hiển thị
                }

                // Gọi phương thức deleteIngredient() từ IngredientsBUS để set cột isDeleted thành True
                IngredientsBUS ingredientsBUS = new IngredientsBUS();
                boolean success = false;
                try {
                    success = ingredientsBUS.setIngredientAsDeleted(id);
                } catch (Exception ex) {
                    Logger.getLogger(QuanLiNguyenLieu.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (!success) {
                    JOptionPane.showMessageDialog(this, "Xóa nguyên liệu không thành công!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    return; // Dừng phương thức nếu xóa không thành công
                }
            }
        }

        // Kiểm tra xem có ít nhất một dòng được chọn không
        if (!isSelected) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất một dòng để xóa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return; // Dừng phương thức nếu không có dòng nào được chọn
        }

        // Hiển thị thông báo xóa thành công
        JOptionPane.showMessageDialog(this, "Xóa nguyên liệu thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);

        try {
            // Cập nhật lại dữ liệu trên jTable
            loadDataToTable(isSelectAll);
        } catch (Exception ex) {
            Logger.getLogger(QuanLiNguyenLieu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void chbSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbSelectAllActionPerformed
        isSelectAll = !isSelectAll;
        loadDataToTable(isSelectAll);
    }//GEN-LAST:event_chbSelectAllActionPerformed

    private void txtSearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtSearchCaretUpdate
        txtSearch.putClientProperty(FlatClientProperties.TEXT_FIELD_SHOW_CLEAR_BUTTON, true);
        TableRowSorter tableRowSorter = new TableRowSorter(tbIngredients.getModel());
        String find = txtSearch.getText().trim();
        if (!find.isEmpty()) {
            tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + find, 2));
        }
        tbIngredients.setRowSorter(tableRowSorter);
    }//GEN-LAST:event_txtSearchCaretUpdate

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnAdd;
    public javax.swing.JButton btnChange;
    public javax.swing.JButton btnDelete;
    public javax.swing.JCheckBox chbSelectAll;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel3;
    public javax.swing.JPanel jPanel4;
    public javax.swing.JPanel jPanel5;
    public javax.swing.JPanel jPanel6;
    public javax.swing.JScrollPane jScrollPane1;
    public GUI.Comp.Swing.PanelBackground panelBackground1;
    public GUI.Comp.Swing.PanelBackground panelBackground2;
    public GUI.Comp.Swing.PanelBackground panelBackground4;
    public GUI.Comp.Swing.PanelBackground panelBackground5;
    public GUI.Comp.Swing.PanelBackground panelBackground6;
    public GUI.Comp.Swing.PanelBackground panelBackground7;
    public GUI.Comp.Swing.PanelBackground panelBackground8;
    public GUI.Comp.Swing.PanelBackground pnSelectAll;
    public javax.swing.JTable tbIngredients;
    public javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
