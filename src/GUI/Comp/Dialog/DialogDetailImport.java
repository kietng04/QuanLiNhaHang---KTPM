/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.Comp.Dialog;

import BUS.DetailImportBillBUS;
import BUS.ImportBillBUS;
import BUS.IngredientsBUS;
import BUS.SupplierBUS;
import DTO.DetailImportBillDTO;
import DTO.ImportBillDTO;
import DTO.IngredientsDTO;
import DTO.StaffDTO;
import DTO.SupplierDTO;
import java.awt.Dialog;
import java.awt.Window;
import java.awt.event.ItemEvent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;

/**
 *
 * @author Tai
 */
public class DialogDetailImport extends javax.swing.JPanel {

    private List<SupplierDTO> supplierList = new ArrayList<>();
    private ImportBillDTO importBill = new ImportBillDTO();
    // Thêm biến instance để lưu trữ chỉ mục của dòng được chọn trong JTable
    private int selectedRowIndex = -1;
    private double totalPrice = 0;
    private List<IngredientsDTO> ingredientsList = new ArrayList<>();
    private List<DetailImportBillDTO> detailImportBillList = new ArrayList<>();
    private IngredientsBUS ingredientsBUS = new IngredientsBUS();
    private DefaultTableModel model = new DefaultTableModel();
    
    private DetailImportBillBUS detailImportBillBUS = new DetailImportBillBUS();
    private ImportBillBUS importBillBUS = new ImportBillBUS();
    
    
    
    public DialogDetailImport() {
        initComponents();
       
        importBill.setId(System.currentTimeMillis());
        tbDetails.setRowHeight(35);
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) tbDetails.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(JLabel.LEFT);
        initComboBox();
        initComboBoxSupplier();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        cbxSuplier = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cbxIngre = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lbSoLuongTon = new javax.swing.JLabel();
        lbGiaNhapHienTai = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnXoa = new javax.swing.JButton();
        jPanel26 = new javax.swing.JPanel();
        btnXacNhan = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbDetails = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(810, 430));
        setPreferredSize(new java.awt.Dimension(810, 430));
        setLayout(new java.awt.BorderLayout(10, 0));

        jPanel1.setMaximumSize(new java.awt.Dimension(100, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel6.setText("Nhà cung cấp");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 30, -1, -1));

        cbxSuplier.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        cbxSuplier.setMaximumSize(new java.awt.Dimension(120, 30));
        cbxSuplier.setPreferredSize(new java.awt.Dimension(120, 30));
        jPanel1.add(cbxSuplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 23, -1, -1));

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel5.setText("Nguyên liệu");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(261, 30, -1, -1));

        cbxIngre.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        cbxIngre.setMaximumSize(new java.awt.Dimension(120, 30));
        cbxIngre.setPreferredSize(new java.awt.Dimension(120, 30));
        cbxIngre.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxIngreItemStateChanged(evt);
            }
        });
        jPanel1.add(cbxIngre, new org.netbeans.lib.awtextra.AbsoluteConstraints(351, 23, -1, -1));

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel1.setText("Số lượng");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(489, 30, -1, -1));

        txtQuantity.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtQuantity.setMaximumSize(new java.awt.Dimension(120, 30));
        txtQuantity.setPreferredSize(new java.awt.Dimension(120, 30));
        jPanel1.add(txtQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(572, 24, -1, -1));

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel3.setText("Giá nhập");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 30, -1, -1));

        txtPrice.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtPrice.setMaximumSize(new java.awt.Dimension(120, 30));
        txtPrice.setPreferredSize(new java.awt.Dimension(120, 30));
        jPanel1.add(txtPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(784, 24, -1, -1));

        jLabel2.setFont(new java.awt.Font("Roboto", 3, 14)); // NOI18N
        jLabel2.setText("Số lượng tồn kho");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(439, 66, -1, -1));

        jLabel4.setFont(new java.awt.Font("Roboto", 3, 14)); // NOI18N
        jLabel4.setText("Giá đang nhập");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(686, 66, -1, -1));

        lbSoLuongTon.setFont(new java.awt.Font("Roboto", 3, 14)); // NOI18N
        lbSoLuongTon.setText("0");
        jPanel1.add(lbSoLuongTon, new org.netbeans.lib.awtextra.AbsoluteConstraints(572, 66, 96, -1));

        lbGiaNhapHienTai.setFont(new java.awt.Font("Roboto", 3, 14)); // NOI18N
        lbGiaNhapHienTai.setText("0");
        jPanel1.add(lbGiaNhapHienTai, new org.netbeans.lib.awtextra.AbsoluteConstraints(784, 66, 120, -1));

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setMaximumSize(new java.awt.Dimension(100, 100));
        jPanel2.setPreferredSize(new java.awt.Dimension(120, 100));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel25.setPreferredSize(new java.awt.Dimension(100, 200));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0);
        flowLayout1.setAlignOnBaseline(true);
        jPanel25.setLayout(flowLayout1);

        btnThem.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setMaximumSize(new java.awt.Dimension(89, 35));
        btnThem.setPreferredSize(new java.awt.Dimension(89, 35));
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        jPanel25.add(btnThem);

        jPanel5.setPreferredSize(new java.awt.Dimension(50, 25));
        jPanel25.add(jPanel5);

        btnXoa.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.setMaximumSize(new java.awt.Dimension(89, 35));
        btnXoa.setPreferredSize(new java.awt.Dimension(89, 35));
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        jPanel25.add(btnXoa);

        jPanel2.add(jPanel25, java.awt.BorderLayout.PAGE_START);

        btnXacNhan.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        btnXacNhan.setText("Xác nhận");
        btnXacNhan.setMargin(new java.awt.Insets(2, 5, 3, 5));
        btnXacNhan.setMaximumSize(new java.awt.Dimension(89, 100));
        btnXacNhan.setPreferredSize(new java.awt.Dimension(89, 100));
        btnXacNhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXacNhanActionPerformed(evt);
            }
        });
        jPanel26.add(btnXacNhan);

        jPanel2.add(jPanel26, java.awt.BorderLayout.PAGE_END);

        add(jPanel2, java.awt.BorderLayout.LINE_END);

        tbDetails.setBackground(new java.awt.Color(35, 35, 35));
        tbDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Mã chi tiết", "Tên nguyên liệu", "Giá nhập", "Số lượng", "Thành tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDetailsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbDetails);

        add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel6.setPreferredSize(new java.awt.Dimension(5, 100));
        add(jPanel6, java.awt.BorderLayout.LINE_START);

        jPanel13.setPreferredSize(new java.awt.Dimension(100, 15));
        add(jPanel13, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    public void render() {
        model = (DefaultTableModel) tbDetails.getModel();
        model.setRowCount(0);
        for (DetailImportBillDTO x : detailImportBillList) {
            totalPrice += x.getTotal();
            model.addRow(new Object[]{x.getId(), ingredientsBUS.getIngredientById(x.getIngredientid()).getName(), x.getPrice(), x.getQuantity(), x.getTotal()});
        }
        model.fireTableDataChanged();
        tbDetails.setModel(model);
    }
    
    public void initComboBox() {
        ingredientsList = new IngredientsBUS().getAllActiveIngredients();
        for (IngredientsDTO x : ingredientsList) {
            cbxIngre.addItem(x.getName());
        }
    }

    public void initComboBoxSupplier() {
        supplierList = new SupplierBUS().getAllData();
        for (SupplierDTO x : supplierList) {
            cbxSuplier.addItem(x.getName());
        }
    }

    // nút thêm
    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // Kiểm tra xem các trường text field có trống không
        if (txtQuantity.getText().isEmpty() || txtPrice.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return; // Thoát khỏi phương thức nếu có trường trống
        }
        try {
            // Lấy giá trị từ các text field
            int quantity = Integer.parseInt(txtQuantity.getText());
            long price = Long.parseLong(txtPrice.getText());
            // Kiểm tra điều kiện số lượng không được bé hơn hoặc bằng 0
            if (quantity <= 0) {
                JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                return; // Thoát khỏi phương thức nếu số lượng không hợp lệ
            }
            if (price <= 0) {
                JOptionPane.showMessageDialog(this, "Số tiền phải lớn hơn 0.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                return; // Thoát khỏi phương thức nếu số lượng không hợp lệ
            }
            long ingredientId = ingredientsList.get(cbxIngre.getSelectedIndex()).getId();
            boolean isFound = false;
            if (detailImportBillList.size() == 0) {
                isFound = true;
                long total = quantity * price;
                long id = System.currentTimeMillis();
                DetailImportBillDTO detail = new DetailImportBillDTO();
                detail.setId(id);
                detail.setQuantity(quantity);
                detail.setPrice(price);
                detail.setTotal(total);
                detail.setBillid(importBill.getId()); // Sử dụng mã Bill hiện tại
                detail.setIngredientid(ingredientId);
                detailImportBillList.add(detail);
                JOptionPane.showMessageDialog(this, "Thêm thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                for (DetailImportBillDTO x : detailImportBillList) {
                    if (x.getIngredientid() == ingredientId) {
                        isFound = true;
                        if (x.getPrice() != price) {
                            JOptionPane.showMessageDialog(tbDetails, "Nguyên liệu đã tồn tại với giá bán khácN");
                        }
                        else {
                            x.setQuantity(x.getQuantity() + quantity);
                            x.setTotal(x.getQuantity() * x.getPrice());
                        }
                        break;
                    }
                }
            }
            if (!isFound) {
                long total = quantity * price;

                long id = System.currentTimeMillis();
                DetailImportBillDTO detail = new DetailImportBillDTO();
                detail.setId(id);
                detail.setQuantity(quantity);
                detail.setPrice(price);
                detail.setTotal(total);
                detail.setBillid(importBill.getId()); // Sử dụng mã Bill hiện tại
                detail.setIngredientid(ingredientId);
                detailImportBillList.add(detail);
                JOptionPane.showMessageDialog(this, "Thêm thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
            
            // Thông báo thêm thành công
            render();
            // Reset các text field sau khi thêm thành công
            txtQuantity.setText("");
            txtPrice.setText("");
            if (detailImportBillList.size() > 0) {
                cbxSuplier.setEnabled(false);
            }
        } catch (NumberFormatException ex) {
            // Xử lý nếu người dùng nhập không đúng định dạng số
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số vào các trường số lượng, giá và mã nguyên liệu.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
        } catch (Exception ex) {
            // Xử lý nếu có lỗi khi thêm dữ liệu
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm dữ liệu: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnThemActionPerformed
    // nút xóa
    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // Kiểm tra xem có dòng nào được chọn không
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn dòng cần xóa.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Lấy chỉ mục của dòng được chọn
        detailImportBillList.remove(selectedRowIndex);
        JOptionPane.showMessageDialog(this, "Xoá thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        render();
        selectedRowIndex = -1;
        if (detailImportBillList.size() == 0) {
            cbxSuplier.setEnabled(true);
        }
     
       
    }//GEN-LAST:event_btnXoaActionPerformed
    // nút xác nhận
    private void btnXacNhanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXacNhanActionPerformed
        int confirmation = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn thêm dữ liệu?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirmation == JOptionPane.YES_OPTION) {
            try {
                importBill.setQuantity(detailImportBillList.size());
                importBill.setTotal(totalPrice);
                importBill.setImport_date(new Date());
                importBill.setSupplierID(supplierList.get(cbxSuplier.getSelectedIndex()).getId());
                importBill.setUserId(StaffDTO.staffLogging.getId());
                
                if (!importBillBUS.addImportBill(importBill)) {
                    JOptionPane.showConfirmDialog(this, "Nhập hàng thất bại.");
                    return;
                }
                
                for (DetailImportBillDTO x : detailImportBillList) {
                    detailImportBillBUS.addDetailImportBill(x);
                    IngredientsDTO ingre = new IngredientsBUS().getIngredientById(x.getIngredientid());
                    ingre.setQuantity(ingre.getQuantity() + x.getQuantity());
                    new IngredientsBUS().updateIngredient(ingre);
                }
                
                // Thêm dữ liệu vào cơ sở dữ liệu thông qua BUS
                JOptionPane.showMessageDialog(this, "Nhập hàng thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);

                dispose(); // Đóng dialog sau khi thêm dữ liệu thành công
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "UserID và SupplierID phải là số nguyên dương.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnXacNhanActionPerformed

    private void tbDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDetailsMouseClicked
        selectedRowIndex = tbDetails.getSelectedRow();
     
    }//GEN-LAST:event_tbDetailsMouseClicked

    private void cbxIngreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxIngreItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            IngredientsDTO ingre = ingredientsList.get(cbxIngre.getSelectedIndex());
            lbSoLuongTon.setText(ingre.getQuantity() + "");
            DetailImportBillDTO x = new DetailImportBillBUS().getDetailImportBillByBillIdIngre(ingre.getId());
            if (x == null) {
                lbGiaNhapHienTai.setText(0 + "");
                lbSoLuongTon.setText(0 + "");
            }
            else {
                long price = x.getPrice();
                lbGiaNhapHienTai.setText(price + "");
                if (ingre.getQuantity() > 0) {
                    txtPrice.setEnabled(false);
                    txtPrice.setText(price + "");
                }
                else {
                    txtPrice.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_cbxIngreItemStateChanged

    // Thêm phương thức dispose vào JDialog
    private void dispose() {
        Window window = SwingUtilities.getWindowAncestor(this);
        if (window instanceof Dialog) {
            Dialog dialog = (Dialog) window;
            dialog.dispose();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnThem;
    public javax.swing.JButton btnXacNhan;
    public javax.swing.JButton btnXoa;
    public javax.swing.JComboBox<String> cbxIngre;
    public javax.swing.JComboBox<String> cbxSuplier;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel13;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel25;
    public javax.swing.JPanel jPanel26;
    public javax.swing.JPanel jPanel5;
    public javax.swing.JPanel jPanel6;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JLabel lbGiaNhapHienTai;
    public javax.swing.JLabel lbSoLuongTon;
    public javax.swing.JTable tbDetails;
    public javax.swing.JTextField txtPrice;
    public javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables

    private boolean isBillIdExists(int billId) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private int generateNewBillId() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
